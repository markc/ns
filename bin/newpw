#!/usr/bin/env bash
# Created: 20170715 - Updated: 20250407
# Copyright (C) 1995-2025 Mark Constable <markc@renta.net> (AGPL-3.0)
[[ $1 =~ -h ]] && echo "Usage: newpw [howmany(1)] [length(16)]" && exit 1


generate_password() {
  local length=${1:-16}

  # Generate more characters than needed
  # Exclude 'O' from the charset
  local charset="ABCDEFGHIJKLMNPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"
  local upper_chars="ABCDEFGHIJKLMNPQRSTUVWXYZ"
  local lower_chars="abcdefghijklmnopqrstuvwxyz"
  local digit_chars="0123456789"

  # Guarantee one of each required type
  local upper_char=${upper_chars:$((RANDOM % ${#upper_chars})):1}
  local lower_char=${lower_chars:$((RANDOM % ${#lower_chars})):1}
  local digit_char=${digit_chars:$((RANDOM % ${#digit_chars})):1}

  # Fill the rest with random characters
  local remaining_length=$((length - 3))
  local rest=""

  # Use /dev/urandom for generating the rest of the characters
  for ((i = 0; i < remaining_length; i++)); do
    rest="${rest}${charset:$((RANDOM % ${#charset})):1}"
  done

  # Combine all parts
  local combined="${upper_char}${lower_char}${digit_char}${rest}"

  # Shuffle the characters
  local password=$(echo "$combined" | fold -w1 | shuf | tr -d '\n')

  # Double-check the length
  if [ ${#password} -ne $length ]; then
    echo "ERROR: Generated password length (${#password}) does not match requested length ($length)" >&2
    return 1
  fi

  password="${password//O/0}" # Replace O with 0 - Backup
  echo "$password"
}

# Generate requested number of passwords
howmany=${1:-1}
length=${2:-16}

for ((i = 1; i <= howmany; i++)); do
  pw=$(generate_password $length)
  if [ ${#pw} -eq $length ]; then
    echo "$pw"
  else
    # Fallback method if the first one fails
    openssl rand -base64 48 | tr -dc 'a-zA-Z0-9' | head -c $((length - 3)) |
      (
        echo -n "$(cat)$(openssl rand -base64 12 | tr -dc 'A-Z' | head -c 1)$(
          openssl rand -base64 12 | tr -dc 'a-z' | head -c 1
        )$(openssl rand -base64 12 | tr -dc '0-9' | head -c 1)" |
          fold -w1 | shuf | tr -d '\n' | head -c $length
      )
  fi
done
